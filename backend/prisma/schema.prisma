// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  bio           String?
  location      String?
  website       String?
  linkedin      String?
  github        String?
  role          UserRole  @default(JOB_SEEKER)
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Job seeker specific fields
  resume        String?
  skills        String[]
  experience    Experience?
  education     String?
  expectedSalary Int?
  availability  String?
  preferences   Json?

  // Company specific fields
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     String?
  position      String?
  department    String?

  // Relations
  jobApplications JobApplication[]
  savedJobs     SavedJob[]
  jobPostings   Job[]        @relation("JobPoster")
  notifications Notification[]
  messages      Message[]    @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  fraudReports  FraudReport[] @relation("FraudReporter")

  @@map("users")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  description   String?
  logo          String?
  website       String?
  industry      String?
  size          CompanySize?
  type          CompanyType?
  founded       Int?
  location      String?
  address       String?
  phone         String?
  email         String?
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  verificationStatus CompanyVerificationStatus @default(UNVERIFIED)
  fraudScore    Int?      @default(0)
  fraudFlags    String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  users         User[]
  jobs          Job[]
  applications  JobApplication[]

  @@map("companies")
}

model Job {
  id              String    @id @default(cuid())
  title           String
  description     String
  requirements    String[]
  responsibilities String[]
  benefits        String[]
  salary          Json?
  type            JobType
  experience      Experience
  isRemote        Boolean   @default(false)
  location        String?
  deadline        DateTime?
  isUrgent        Boolean   @default(false)
  isFeatured      Boolean   @default(false)
  isActive        Boolean   @default(true)
  verificationStatus JobVerificationStatus @default(PENDING)
  fraudScore      Int?      @default(0)
  fraudFlags      String[]
  views           Int       @default(0)
  applicationCount Int      @default(0)
  postedAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Scraping fields
  source          String?   // LinkedIn, Indeed, Glassdoor, etc.
  externalUrl     String?   // Original job posting URL
  isScraped       Boolean   @default(false)
  lastScraped     DateTime?

  // Relations
  company         Company   @relation(fields: [companyId], references: [id])
  companyId       String
  postedBy        User      @relation("JobPoster", fields: [postedById], references: [id])
  postedById      String
  applications    JobApplication[]
  savedBy         SavedJob[]

  @@map("jobs")
}

model JobApplication {
  id              String    @id @default(cuid())
  status          ApplicationStatus @default(PENDING)
  coverLetter     String?
  resume          String?
  portfolio       String?
  expectedSalary  Int?
  availability    String?
  appliedAt       DateTime  @default(now())
  reviewedAt      DateTime?
  notes           String?

  // Relations
  job             Job       @relation(fields: [jobId], references: [id])
  jobId           String
  applicant       User      @relation(fields: [applicantId], references: [id])
  applicantId     String
  company         Company   @relation(fields: [companyId], references: [id])
  companyId       String

  @@map("job_applications")
}

model SavedJob {
  id        String   @id @default(cuid())
  savedAt   DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String

  @@unique([userId, jobId])
  @@map("saved_jobs")
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("notifications")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId String

  @@map("messages")
}

model FraudReport {
  id          String    @id @default(cuid())
  type        String    // JOB or COMPANY
  targetId    String
  reason      String
  evidence    String?
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  adminNotes  String?
  createdAt   DateTime  @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?

  // Relations
  reporter    User      @relation("FraudReporter", fields: [reporterId], references: [id])
  reporterId  String

  @@map("fraud_reports")
}

// Enums
enum UserRole {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum CompanyType {
  PRIVATE
  PUBLIC
  NONPROFIT
  GOVERNMENT
  AGENCY
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum Experience {
  ENTRY
  JUNIOR
  MID
  SENIOR
  EXECUTIVE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  INTERVIEW
  REJECTED
  HIRED
}

enum NotificationType {
  APPLICATION_UPDATE
  NEW_JOB
  MESSAGE
  SYSTEM
}

enum CompanyVerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  SUSPICIOUS
  BLOCKED
}

enum JobVerificationStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPICIOUS
  BLOCKED
}

 